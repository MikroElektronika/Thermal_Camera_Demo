/*
 * Project name:
     ThermalCameraDemo.mcpar
 * Generated by:
     Visual TFT
 * Date of creation
     14.5.2019.
 * Test configuration:
     MCU:             STM32F407ZG
     Dev.Board:       Fusion_for_STM32_Board_5_Capacitive
     Oscillator:      168000000 Hz
     SW:              mikroC PRO for ARM
                      http://www.mikroe.com/mikroc/arm/
 */

#include "ThermalCameraDemo_objects.h"
#include "ThermalCameraDemo_resources.h"
#include "demo_types.h"
#include "demo_config.h"
#include "fonts.h"
#include "images.h"
#include "color_scale.h"

void main() {

#define TA_SHIFT 9

uint8_t frame_type;
uint8_t BOXS;
uint8_t V_OFF;
uint8_t H_OFF;

float mlx90640To[768];
paramsMLX90640 mlx90640;
uint16_t eeMLX90640[832];
uint16_t mlx90640Frame[834];
uint8_t fSettings = 0;
int fScreen = 0;
uint8_t fMessage = 0;

unsigned int oldstate;
uint16_t x = 0;
float Ta = 0;
float tr = 0;
float emissivity = 0.95;

uint8_t Touch_new;
uint8_t Touch_old;
uint8_t ALS_range;
uint8_t darkLight_ambient;
uint8_t hall_detect;
uint16_t dataRead;

char demoText[ 100 ] = "0.00";

void systemInit()
{
    Delay_80us();

    mikrobus_gpioInit( _MIKROBUS3, _MIKROBUS_INT_PIN, _GPIO_INPUT );
    mikrobus_gpioInit( _MIKROBUS3, _MIKROBUS_CS_PIN, _GPIO_OUTPUT );
    mikrobus_gpioInit( _MIKROBUS3, _MIKROBUS_RST_PIN, _GPIO_OUTPUT );

    mikrobus_spiInit( _MIKROBUS3, &_MATRIXRGB_SPI_CFG[0] );
    mikrobus_i2cInit( _MIKROBUS2, &_IRGRID2_I2C_CFG[0] );
    
    
    mikrobus_gpioInit( _MIKROBUS5, _MIKROBUS_INT_PIN, _GPIO_INPUT );
    mikrobus_i2cInit( _MIKROBUS5, &_PROXFUSION2_I2C_CFG[0] );
    Delay_ms( 100 );
}

void applicationInit()
{
    matrixrgb_spiDriverInit( (T_MATRIXRGB_P)&_MIKROBUS3_GPIO, (T_MATRIXRGB_P)&_MIKROBUS3_SPI );
    matrixrgb_deviceReset();

    matrixrgb_deviceInit( _MATRIXRGB_PATTERN_4S_MAP_6MM );
    matrixrgb_setPower( 1 );
    Delay_1sec();

    matrixrgb_setBrightness( 30 );
    matrixrgb_fillScreen( _COLOR_BLUE );
    matrixrgb_setFont( &Arial9x9[0], _COLOR_WHITE, _MATRIXRGB_FONT_HORIZONTAL );

    // Text Write Ttest
     matrixrgb_writeText( "IR GRID", 15, 10 );
     matrixrgb_writeText( "Thermal", 15, 25 );
     matrixrgb_writeText( "camera", 15, 40 );


    irgrid2_i2cDriverInit( (T_IRGRID2_P)&_MIKROBUS2_GPIO, (T_IRGRID2_P)&_MIKROBUS2_I2C, 0x33 );

    irgrid2_readEEPROM(eeMLX90640);
    irgrid2_ExtractParameters(eeMLX90640, &mlx90640);
    irgrid2_setRefreshRate( 0x03 ); // 4 Hz

    irgrid2_getFrameData(mlx90640Frame);
    Ta = irgrid2_GetTa(mlx90640Frame, &mlx90640);
    tr = Ta - TA_SHIFT;
    color_scale_init(Ta);
    
    proxfusion2_i2cDriverInit( (T_PROXFUSION2_P)&_MIKROBUS5_GPIO, (T_PROXFUSION2_P)&_MIKROBUS5_I2C, 0x44 );
    proxfusion2_init();
    proxfusion2_defaultConfig();
    Delay_100ms();
    
}

uint16_t color;
uint8_t rc = 0, cc = 0;


uint16_t matrix_cnt = 0;

void create_martixImage()
{
    uint8_t pos;
    uint8_t rcnt;

    matrix_cnt = 16 * 64;
    for (rc = 0; rc < 24; rc++)
    {
        for (rcnt = 0; rcnt < 2; rcnt++)
        {
            for (cc = 0; cc < 32; cc++)
            {
                 color = color_scale_rgb_conversion( GET_PIX_NOR(rc, cc));
                 pos = matrix_cnt;
                 gImage_matrixImage[pos] = color;
                 gImage_matrixImage[pos + 1 ] = color >> 8;
                 gImage_matrixImage[pos + 2 ] = color;
                 gImage_matrixImage[pos + 3 ] = color >> 8;
                 matrix_cnt += 4;
            }
        }
    }
}

extern int8_t _min_value  ;
extern int8_t _low_value  ;
extern int8_t _med_value  ;
extern int8_t _high_value ;
extern int8_t _max_value  ;

void _displayTempValue()
{
    IntToStr(_min_value, demoText);
    TFT_Set_Font(&Tahoma40x40, 0x0000, FO_HORIZONTAL);
    TFT_Write_Text(demoText, 180, 75);
    
    IntToStr(_low_value, demoText);
    TFT_Set_Font(&Tahoma40x40, 0x0000, FO_HORIZONTAL);
    TFT_Write_Text(demoText, 180, 155);
    
    IntToStr(_med_value, demoText);
    TFT_Set_Font(&Tahoma40x40, 0x0000, FO_HORIZONTAL);
    TFT_Write_Text(demoText, 180, 235);

    IntToStr(_high_value, demoText);
    TFT_Set_Font(&Tahoma40x40, 0x0000, FO_HORIZONTAL);
    TFT_Write_Text(demoText, 180, 310);
    
    IntToStr(_max_value, demoText);
    TFT_Set_Font(&Tahoma40x40, 0x0000, FO_HORIZONTAL);
    TFT_Write_Text(demoText, 180, 390);
}

void applicationTask()
{
    if(fScreen == 0)
    {
        irgrid2_getFrameData(mlx90640Frame);
        Ta = irgrid2_GetTa(mlx90640Frame, &mlx90640);
        tr = Ta - TA_SHIFT;
        irgrid2_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
        color_scale_init(Ta);

        TFT_Set_Font(&Tahoma40x40, 0x0679, FO_HORIZONTAL);
        TFT_Write_Text(demoText, 75, 389);
        TFT_Set_Font(&Tahoma40x40, 0x632C, FO_HORIZONTAL);
        FloatToStr(Ta - 5.0, demoText);
        TFT_Write_Text(demoText, 75, 389);

        create_martixImage();
        matrixrgb_drawImage(gImage_matrixImage);
        Delay_ms( 400 );

        Touch_new = proxfusion2_readByte(0x13);
        Touch_new &= 0x02;
        
        if (Touch_new == 0x02 && Touch_old != 0x02)
        {
            fScreen = 1;
            DrawScreen(&Screen2);
            fMessage = 0;
            Delay_ms( 500 );
        }
        Touch_old = Touch_new;
    }
    else
    {
        Check_TP();
        if(fMessage == 0)
        {
             matrixrgb_drawImage(clickcloud_bmp_bmp);
             Delay_ms( 400 );
             fMessage = 1;
             _displayTempValue();
        }
        
        Touch_new = proxfusion2_readByte(0x13);
        Touch_new &= 0x02;
        if (Touch_new == 0x02 && Touch_old != 0x02)
        {
            fScreen = 0;
            DrawScreen(&Screen1);
            Delay_ms( 500 );
        }
        Touch_old = Touch_new;
    }
}

void main()
{
    systemInit();
    applicationInit();
  Start_TP();

  while (1) {
    Check_TP();
        applicationTask();
  }
}
